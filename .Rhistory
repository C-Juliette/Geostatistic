use_r("moy_gliss")
load_all()
moy_gliss(matrix(rnorm(100,0,1), nrow = 10), r=1)
exists("moy_gliss", where = globalenv(), inherits = FALSE)
check()
use_mit_license("Juliette Chiapello")
use_mit_license("Juliette Chiapello")
check()
check()
library(devtools)
library(tidyverse)
library(fs)
check()
check()
document()
?moving_average
?moving_average
document()
?moving_average
check()
install()
library(MonPackage)
moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
use_testthat()
library(devtools)
use_testthat()
use_test("moving_average")
expect_equal(10, 10)
expect_equal(10, 10 + 1e-7)
expect_equal(10, 11)
library(fs)
expect_equal(10, 10)
expect_equal(10, 10 + 1e-7)
expect_equal(10, 11)
library(devtools)
expect_equal(10, 10)
expect_equal(10, 10 + 1e-7)
expect_equal(10, 11)
library(testthat)
expect_equal(10, 10)
expect_equal(10, 10 + 1e-7)
expect_equal(10, 11)
expect_equal(10, 10)
expect_equal(10, 10 + 1e-7)
expect_equal(10, 11)
expect_equal(10,10)
expect_equal(10,11)
expect_equal(10,10 + 1e-7)
set.seed(123)
set.seed(1)
rbinom(4, 1)
rbinom(4, 1, 0.5)
rbinom(4, 1, 0.5)
rbinom(4, 1, 0.5)
rbinom(4, 1, 0.5)
set.seed(1)
rbinom(4, 1, 0.5)
rbinom(4, 1, 0.5)
rbinom(4, 1, 0.5)
rbinom(4, 1, 0.5)
set.seed(1)
rbinom(4, 1, 0.5)
set.seed(1)
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
Z
set.seed(1)
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
Z
Y <- moving_average(Z,1)
Y
set.seed(1)
Z <- matrix(rbinom(3*3, 1, 0.5), nrow = 3)
Z
test_that("moving average works", {
set.seed(1)
Z <- matrix(rbinom(3*3, 1, 0.5), nrow = 3)
Y <- moving_average(Z,1)
expect_equal(Y, 6/9)
})
matrix(c(6/9))
test_that("moving average works", {
set.seed(1)
Z <- matrix(rbinom(3*3, 1, 0.5), nrow = 3)
expect_equal(moving_average(Z,1), matrix(c(6/9)))
})
set.seed(1)
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
Z
test_that("moving average works", {
set.seed(1)
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
expect_equal(moving_average(Z,2), matrix(c(13/25)))
})
test_that("moving average works", {
set.seed(1)
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
expect_identical(moving_average(Z,2), matrix(c(13/25)))
})
test_that("moving average works", {
set.seed(1)
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
expect_identical(moving_average(Z,2), matrix(c(13/25)))
})
load_all()
test()
use_package("tidyverse")
use_package("tidyr")
use_package("ggplot2")
use_package("cowplot")
use_package("docstring")
use_package("stringr")
use_package("viridis")
use_package("data.table")
use_package("scales")
use_r("plot_matrix")
load_all()
plot_matrix(Z)
load_all()
plot_matrix(Z)
use_r("variance")
load_all()
variance(c(1,2,3))
document()
?variance
document()
?variance
plot_matrix(Z)
plot_matrix(Z)
document()
plot_matrix(Z)
plot_matrix(Z)
load_all()
plot_matrix(Z)
load_all()
plot_matrix(Z)
load_all()
plot_matrix(Z)
load_all()
load_all()
plot_matrix(Z)
load_all()
load_all()
plot_matrix(Z)
load_all()
plot_matrix(Z)
plot_matrix(Z)
load_all()
plot_matrix(Z)
load_all()
plot_matrix(Z)
document()
document()
?plot_matrix
check()
use_testthat()
use_test("variance")
set.seed(1)
Z <- matrix(rbinom(2*2, 1, 0.5), nrow = 5)
set.seed(1)
Z <- matrix(rbinom(2*2, 1, 0.5), nrow = 2)
Z
0.5**2
set.seed(1)
Z <- matrix(rbinom(2*2, 1, 0.5), nrow = 2)
use_test("plot_matrix")
test_that("variance function works", {
set.seed(1)
Z <- matrix(rbinom(2*2, 1, 0.5), nrow = 2)
expect_equal(variance(Z), 0.5**2)
})
test()
document()
check()
install()
library(MonPackage)
variance(c(1,2,3))
install()
library(devtools)
install()
?moving_average
?variance
test_that("moving average works", {
set.seed(1)
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
expect_identical(moving_average(Z,2), matrix(c(13/25)))
})
library(testthat)
test_that("moving average works", {
set.seed(1)
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
expect_identical(moving_average(Z,2), matrix(c(13/25)))
})
set.seed(1)
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
Z
moving_average(Z)
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
nblignesZ <- dim(Z)[1]
nbcolonnesZ <- dim(Z)[2]
nblignesY <- nblignesZ - 2*r
nbcolonnesY <- nbcolonnesZ - 2*r
Y <- matrix(data = rep(0, nblignesY*nbcolonnesY), nrow = nblignesY)
for(i in (r+1):(nblignesZ-r)){
for(j in (r+1):(nbcolonnesZ-r)){
fenetre <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(fenetre)
}
}
return (Y)
}
moving_average(Z)
Z <- matrix(rbinom(10*10,1,0.5), nrow = 10)
moving_average(Z)
moving_average(Z, 1)
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
as.data.frame(Z)
nblignesZ <- dim(Z)[1]
nbcolonnesZ <- dim(Z)[2]
nblignesY <- nblignesZ - 2*r
nbcolonnesY <- nbcolonnesZ - 2*r
Y <- matrix(data = rep(0, nblignesY*nbcolonnesY), nrow = nblignesY)
for(i in (r+1):(nblignesZ-r)){
for(j in (r+1):(nbcolonnesZ-r)){
fenetre <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(fenetre)
}
}
return (Y)
}
moving_average(Z, 1)
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
Z <- as.data.frame(Z)
nblignesZ <- dim(Z)[1]
nbcolonnesZ <- dim(Z)[2]
nblignesY <- nblignesZ - 2*r
nbcolonnesY <- nbcolonnesZ - 2*r
Y <- matrix(data = rep(0, nblignesY*nbcolonnesY), nrow = nblignesY)
for(i in (r+1):(nblignesZ-r)){
for(j in (r+1):(nbcolonnesZ-r)){
fenetre <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(fenetre)
}
}
return (Y)
}
moving_average(Z, 1)
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
nblignesZ <- dim(Z)[1]
nbcolonnesZ <- dim(Z)[2]
nblignesY <- nblignesZ - 2*r
nbcolonnesY <- nbcolonnesZ - 2*r
Y <- matrix(data = rep(0, nblignesY*nbcolonnesY), nrow = nblignesY)
for(i in (r+1):(nblignesZ-r)){
for(j in (r+1):(nbcolonnesZ-r)){
fenetre <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(fenetre)
}
}
return (long(Y))
}
moving_average(Z, 1)
long <- function(wideZ){
longZ <- as.data.frame(wideZ)
names(longZ) <- c(1:dim(longZ)[2])
longZ <- gather(longZ)
setnames(longZ, "key" , "Var2")
longZ$Var1 <- rep(c(1:dim(wideZ)[1]), dim(wideZ)[2])
longZ <- longZ[c("Var1","Var2","value")]
longZ$Var2 <- as.numeric(longZ$Var2)
return(longZ)
}
moving_average(Z, 1)
library(tidyr)
moving_average(Z, 1)
library(ggplot2)
library(cowplot)
library(docstring)
library(stringr)
library(viridis)
library(data.table)
library(scales)
library(tidyverse)
moving_average(Z, 1)
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
Z <- as.matrix(Z)
nblignesZ <- dim(Z)[1]
nbcolonnesZ <- dim(Z)[2]
nblignesY <- nblignesZ - 2*r
nbcolonnesY <- nbcolonnesZ - 2*r
Y <- matrix(data = rep(0, nblignesY*nbcolonnesY), nrow = nblignesY)
for(i in (r+1):(nblignesZ-r)){
for(j in (r+1):(nbcolonnesZ-r)){
fenetre <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(fenetre)
}
}
return (Y)
}
Z
Z <- as.dataframe(Z)
Z <- as.data.frame(Z)
Z
moving_average(Z, 1)
Z <- as.tibble(Z)
Z <- as_tibble(Z)
moving_average(Z, 1)
Z
moving_average(Z, 1)
library(stringr)
a <- list(1:10, letters)
expect_output(str(a), "List of 2")
library(testthat)
a <- list(1:10, letters)
expect_output(str(a), "List of 2")
a
str(a)
s.data.frame(Z)
is.data.frame(Z)
is.matrix(Z)
Z <- as.tibble(Z)
is.matrix(Z)
is.matrix(Z)
is.data.frame(Z)
moving_average(Z , 2)
moving_average(Z , 2.2)
library(ttutils)
install.packages("ttutils")
library(ttutils)
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (r < 0 ){paste("r must be positive or zero")}
else if (is.Integer(r) == F){paste("r must be an interger")}
else if (is.matrix(Z)==F | is.data.frame(Z) == F){paste("Z must be a matrix/dataframe/tibble")}
else{
Z <- as.matrix(Z)
nblignesZ <- dim(Z)[1]
nbcolonnesZ <- dim(Z)[2]
nblignesY <- nblignesZ - 2*r
nbcolonnesY <- nbcolonnesZ - 2*r
Y <- matrix(data = rep(0, nblignesY*nbcolonnesY), nrow = nblignesY)
for(i in (r+1):(nblignesZ-r)){
for(j in (r+1):(nbcolonnesZ-r)){
fenetre <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(fenetre)
}
}
return (Y)
}
}
moving_average(Z , 2.2)
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (r < 0 ){paste("r must be positive or zero")}
else if (isInteger(r) == F){paste("r must be an interger")}
else if (is.matrix(Z)==F | is.data.frame(Z) == F){paste("Z must be a matrix/dataframe/tibble")}
else{
Z <- as.matrix(Z)
nblignesZ <- dim(Z)[1]
nbcolonnesZ <- dim(Z)[2]
nblignesY <- nblignesZ - 2*r
nbcolonnesY <- nbcolonnesZ - 2*r
Y <- matrix(data = rep(0, nblignesY*nbcolonnesY), nrow = nblignesY)
for(i in (r+1):(nblignesZ-r)){
for(j in (r+1):(nbcolonnesZ-r)){
fenetre <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(fenetre)
}
}
return (Y)
}
}
moving_average(Z , 2.2)
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (r < 0 ){paste("Error : r must be positive or zero")}
else if (isInteger(r) == F){paste("Error : r must be an integer")}
else if (is.matrix(Z)==F | is.data.frame(Z) == F){paste("Error : Z must be a matrix/dataframe/tibble")}
else{
Z <- as.matrix(Z)
nblignesZ <- dim(Z)[1]
nbcolonnesZ <- dim(Z)[2]
nblignesY <- nblignesZ - 2*r
nbcolonnesY <- nbcolonnesZ - 2*r
Y <- matrix(data = rep(0, nblignesY*nbcolonnesY), nrow = nblignesY)
for(i in (r+1):(nblignesZ-r)){
for(j in (r+1):(nbcolonnesZ-r)){
fenetre <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(fenetre)
}
}
return (Y)
}
}
moving_average(Z , 2.2)
moving_average(Z , -2)
moving_average(Z , 0)
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (r < 0 ){paste("Error : r must be positive or zero")}
else if (isInteger(r) == F){paste("Error : r must be an integer")}
else if (is.matrix(Z) == F & is.data.frame(Z) == F){paste("Error : Z must be a matrix/dataframe/tibble")}
else{
Z <- as.matrix(Z)
nblignesZ <- dim(Z)[1]
nbcolonnesZ <- dim(Z)[2]
nblignesY <- nblignesZ - 2*r
nbcolonnesY <- nbcolonnesZ - 2*r
Y <- matrix(data = rep(0, nblignesY*nbcolonnesY), nrow = nblignesY)
for(i in (r+1):(nblignesZ-r)){
for(j in (r+1):(nbcolonnesZ-r)){
fenetre <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(fenetre)
}
}
return (Y)
}
}
moving_average(Z , 0)
moving_average(3 , 0)
if (interactive()) {
suppressMessages(require(devtools))
}
use_devtools()
devtools::install_github("r-lib/devtools")
library(devtools)
has_devel()
