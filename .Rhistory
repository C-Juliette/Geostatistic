#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, " -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
plot_matrix(matrix(1:10, nrow = 5))
plot_matrix(matrix(1:10, nrow = 5), titre = "Ma matrice")
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
plot_matrix(matrix(1:10, nrow = 5), titre = "Ma matrice")
plot_matrix(matrix(1:10, nrow = 5))
plot_matrix(1)
plot_matrix(c(1,2)
)
plot_matrix(c(1,2), c(3,4))
plot_matrix(c(1,2), c(3,4), c(5,6))
plot_matrix(c(1,2))
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(moving_average(Z, 2), "^M must be contain numbers$")
})
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if (!is.vector(Z) & !is.matrix(Z) & !is.data.frame(Z)){stop("M must contain numbers")}
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(moving_average(Z, 2), "^M must contain numbers$")
})
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if (!is.vector(Z) & !is.matrix(Z) & !is.data.frame(Z)){stop("M must contain numbers")}
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(moving_average(Z, 2), "^M must contain numbers$")
})
library(ggplot2)
str_c <- stringr::str_c
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if (!is.vector(Z) & !is.matrix(Z) & !is.data.frame(Z)){stop("M must contain numbers")}
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(moving_average(Z, 2), "^M must contain numbers$")
})
load_all(p)
load_all()
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(moving_average(Z, 2), "^M must contain numbers$")
})
library(devtools)
load_all()
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(moving_average(Z, 2), "^M must contain numbers$")
})
is.vector("a")
is.numeric(matrix(1:2))
is.numeric(as.data.frame(matrix(1:2)))
Z <- data.frame("A")
Z
Z <- data.frame("b")
Z
Z <- data.frame("b", "d")
Z
as.matrix(Z)
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if (is.data.frame(Z)){Z <- as.matrix(Z)}
if (!is.numeric(Z)){stop("M must contain numbers")}
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(moving_average(Z, 2), "^M must contain numbers$")
})
is.numeric("a")
!is.numeric("a")
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if (is.data.frame(Z)){Z <- as.matrix(Z)}
if (T){stop("M must contain numbers")}
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(moving_average(Z, 2), "^M must contain numbers$")
})
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if (is.data.frame(Z)){Z <- as.matrix(Z)}
#if (!is.numeric(Z)){stop("M must contain numbers")}
if (T){stop("a")}
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if (is.data.frame(Z)){Z <- as.matrix(Z)}
if (!is.numeric(Z)){stop("M must contain numbers")}
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(plot_matrix(Z), "^M must contain numbers$")
})
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(plot_matrix(Z), "^M must contain numbers$")
})
load_all()
MonPackage::plot_matrix()
MonPackage::plot_matrix(2)
load_all
load_all()
check()
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(plot_matrix(Z), "^M must contain numbers$")
})
load_all()
load_all()
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if (is.data.frame(M)){M <- as.matrix(M)}
if (!is.numeric(M)){stop("M must contain numbers")}
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
test_that("Anomaly test - error when M does not contain number", {
# arrange
Z <- "a"
# act & assert
expect_error(plot_matrix(Z), "^M must contain numbers$")
})
install()
document()
check()
install()
use_package("ttutils")
load_all()
check()
install()
library(MonPackage)
check()
library(devtools)
check()
check()
library(ttutils)
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if (is.data.frame(M)){M <- as.matrix(M)}
if (!is.numeric(M)){stop("M must contain numbers")}
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
check()
library(devtools)
check()
ggplot <- ggplot2::ggplot
aes <- ggplot2::aes
geom_tile <- ggplot2::geom_tile
scale_fill_viridis_c <- ggplot2::scale_fill_viridis_c
labs <- ggplot2::labs
guides <- ggplot2::guides
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
if (is.data.frame(M)){M <- as.matrix(M)}
if (!is.numeric(M)){stop("M must contain numbers")}
if(titre == ""){titre <- str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
else{titre <- str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
check()
check()
use_package("tibble")
use_package("scale")
use_package("scales")
check()
use_package("stat")
use_package("stats")
load_all()
check()
check()
check()
use_packages(stats)
use_packages(stats)
use_package(stats)
use_package("stats")
check()
check()
check()
check()
check()
check()
cehck()
check()
