a_vector
a_vector <- as.matrix(0:1, by_row = F)
a_vector
test_that("Regular test - a_vector can be a data frame", {
# arrange
a_vector <- as.matrix(0:1, nrow = 1)
# act
actual <- actual_correlation(matrix(1:4, nrow = 2), a_vector)
# assert
expected <- actual_correlation(matrix(1:4, nrow = 2), c(0,1))
expect_equal(actual, expected)
})
a_vector <- as.matrix(0:1, nrow = 1)
a_vector
# arrange
a_vector <- matrix(0:1, nrow = 1)
a_vector
# arrange
a_vector <- matrix(0:1, by_row = T)
# arrange
a_vector <- matrix(0:1, by_row = T)
# arrange
a_vector <- matrix(0:1, byrow = T)
a_vector
# arrange
a_vector <- matrix(0:1, byrow = F)
a_vector
# arrange
a_vector <- matrix(0:1, nrow = 1)
test_that("Regular test - a_vector can be a data frame", {
# arrange
a_vector <- matrix(0:1, nrow = 1)
# act
actual <- actual_correlation(matrix(1:4, nrow = 2), a_vector)
# assert
expected <- actual_correlation(matrix(1:4, nrow = 2), c(0,1))
expect_equal(actual, expected)
})
actual_correlation(matrix(1:4, nrow = 2), a_vector)
#' @param scale 1 km/pixel by default. This number of km by pixels can eventually be changed.
#' @param vect_dir true by default. It reshapes the direction Ex: direction c(4,6) is reshaped as c(2,3). c(1,0) is reshaped as c(0,1) because of symetry considerations.
#'
#' @return a dataframe, giving the distance between points, in km and in pixels, and the empirical values of correlation and covariance according to these distances.
#' Warning : the more the distance between points increases, the less the calculus of correlation and covariance is accurate. That's because, on a grid, there are less points far away from
#' each other than points close to each other. That's to say, there are less and less couples of points to do the calculation as the distance between them increases.
#' @export
#'
#' @examples
#' actual_correlation(matrix(rnorm(1:50), nrow = 10), c(1,2))
actual_correlation <- function(M, a_vector, scale = 1, vect_dir = T){
#tests on M
if(is.data.frame(M) | is.vector(M)){M <- as.matrix(M)}
if(!is.numeric(M)){stop("M must contain a vector, matrix or dataframe")}
#tests on a_vector
if(!is.vector(a_vector)){stop("a_vector must contain a vector")}
if(length(a_vector) != 2){stop("a_vector must have 2 coordinates")}
if(!is.numeric(a_vector)){stop("a_vector must contain numbers")}
#end of tests
if(vect_dir){vect_dir <- direction(a_vector)}
else{vect_dir <- a_vector}
Distance_pixels <- c()
Empirical_covariance <- c()
Empirical_correlation <- c()
h <- sqrt(vect_dir%*%vect_dir)
h1 <- vect_dir[1]
h2 <- vect_dir[2]
dim1 <- dim(M)[1]
dim2 <- dim(M)[2]
i <- 0
while (h1*i <= (dim1-1) & h2*i <= (dim2-1)){
row <- h1*i
column <- h2*i
Distance_pixels <- append(Distance_pixels,h*i)
back_grid <- M[(row+1):dim1,(column+1):dim2]
sigma_back_grid <- sqrt(variance(back_grid))
front_grid <- M[(1:(dim1-row)),1:(dim2-column)]
sigma_front_grid <- sqrt(variance(front_grid))
cov <- mean(back_grid*front_grid)-mean(back_grid)*mean(front_grid)
cor <- cov/(sigma_back_grid*sigma_front_grid)
Empirical_covariance <- append(Empirical_covariance,cov)
Empirical_correlation <- append(Empirical_correlation,cor)
i <- i+1
}
Distance_km <- Distance_pixels*scale
result <- as.data.frame(cbind(Distance_pixels, Distance_km, Empirical_covariance, Empirical_correlation))
if(sum(is.nan(as.matrix(result))) == 1){warning("the result contains infinity NaN")}
return(result)
}
test_that("Regular test - rnorm matrix case", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,1), Empirical_covariance = c(0.91106702, 0.49231819), Empirical_correlation = c(1,1))
set.seed(1)
Z <- actual_correlation(matrix(rnorm(4, 0, 1), nrow = 2), c(0,1))
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
test_that("Regular test - 2*2 matrix case", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,1), Empirical_covariance = c(1.25, 0.25), Empirical_correlation = c(1,1))
Z <- actual_correlation(matrix(1:4, nrow = 2), c(0,1))
# act
actual <- data
# assert
expected <- Z
expect_equal(actual, expected)
})
test_that("Regular test - 2*2 dataframe case", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,1), Empirical_covariance = c(1.25, 0.25), Empirical_correlation = c(1,1))
Z <- actual_correlation(matrix(1:4, nrow = 2), c(0,1))
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
#### A revoir cas oÃ¹ on a un vecteur puis un nombre
test_that("Regular test -  vector case", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,1), Empirical_covariance = c(0.25, 0), Empirical_correlation = c(1, NaN))
Z <- actual_correlation(c(1:2), c(1,0), vect_dir = F)
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
test_that("Regular test -  number case", {
# arrange
data <- data.frame(Distance_pixels = c(0), Distance_km = c(0), Empirical_covariance = c(0), Empirical_correlation = c(NaN))
Z <- actual_correlation(c(1), c(1,0))
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
actual_correlation(c(1), c(1,0))
test_that("Regular test - scale is correctly changed", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,2), Empirical_covariance = c(1.25, 0.25), Empirical_correlation = c(1,1))
Z <- actual_correlation(matrix(1:4, nrow = 2), c(0,1), scale = 2)
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
test_that("Regular test - direction is correctly changed", {
# arrange
# act
actual <- actual_correlation(matrix(1:4, nrow = 2), c(4,6))
# assert
expected <- actual_correlation(matrix(1:4, nrow = 2), c(2,3))
expect_equal(actual, expected)
})
test_that("Regular test - a_vector can be a data frame", {
# arrange
a_vector <- matrix(0:1, nrow = 1)
# act
actual <- actual_correlation(matrix(1:4, nrow = 2), a_vector)
# assert
expected <- actual_correlation(matrix(1:4, nrow = 2), c(0,1))
expect_equal(actual, expected)
})
test_that("Anomaly test - error when M is not a vector/matrix/dataframe", {
# arrange
M <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(M, c(0,1)), "^M must contain a vector, matrix or dataframe$")
})
test_that("Anomaly test - error when a_vector is a string", {
# arrange
a_vector <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain a vector, or 1D matrix or dataframe$")
})
test_that("Anomaly test - error when a_vector is a string", {
# arrange
a_vector <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain a vector, or 1D matrix or dataframe$")
})
test_that("Anomaly test - error when a_vector is a string", {
# arrange
a_vector <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain a vector, or 1D matrix$")
})
test_that("Anomaly test - error when a_vector is a string", {
# arrange
a_vector <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain a vector$")
})
test_that("Anomaly test - error when a_vector is a string", {
# arrange
a_vector <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain a vector$")
})
test_that("Anomaly test - error when a_vector is a string", {
# arrange
a_vector <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain numbers$")
})
test_that("Anomaly test - error when a_vector is not a 2D-vector", {
# arrange
a_vector <- c(1,2,3)
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must be a 2D-object$")
})
test_that("Anomaly test - error when a_vector is not a 2D-vector", {
# arrange
a_vector <- c(1,2,3)
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must be a 2D-object$")
})
test_that("Anomaly test - error when a_vector is not a 2D-vector", {
# arrange
a_vector <- c(1,2,3)
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must have 2 coordinates$")
})
test_that("Anomaly test - error when a_vector is not a 2D-vector", {
# arrange
a_vector <- as.data.frame(c(1,2,3))
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain a vector$")
})
test_that("Anomaly test - warning when a_vector is not a 2D-vector", {
# arrange
a_vector <- c(0,1)
# act & assert
expect_warning(actual_correlation(matrix(1:4, nrow = 1), a_vector), "^the result contains infinity NaN$")
})
test_that("Anomaly test - error when M is not a vector/matrix/dataframe", {
# arrange
M <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(M, c(0,1)), "^M must contain a vector, matrix or dataframe$")
})
test_that("Anomaly test - error when a_vector is a string", {
# arrange
a_vector <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must have 2 coordinates$")
})
test_that("Anomaly test - error when a_vector is not a 2D-vector", {
# arrange
a_vector <- c(1,2,3)
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must have 2 coordinates$")
})
test_that("Anomaly test - error when a_vector is not a 2D-vector", {
# arrange
a_vector <- as.data.frame(c(1,2,3))
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain a vector$")
})
test_that("Anomaly test - warning when a_vector is not a 2D-vector", {
# arrange
a_vector <- c(0,1)
# act & assert
expect_warning(actual_correlation(matrix(1:4, nrow = 1), a_vector), "^the result contains infinity NaN$")
})
test_that("Regular test - a_vector can be a data frame", {
# arrange
a_vector <- matrix(0:1, nrow = 1)
# act
actual <- actual_correlation(matrix(1:4, nrow = 2), a_vector)
# assert
expected <- actual_correlation(matrix(1:4, nrow = 2), c(0,1))
expect_equal(actual, expected)
})
devtools::check()
test_that("Regular test - a_vector can be a data frame", {
# arrange
a_vector <- matrix(0:1, nrow = 1)
# act
actual <- actual_correlation(matrix(1:4, nrow = 2), a_vector)
# assert
expected <- actual_correlation(matrix(1:4, nrow = 2), c(0,1))
expect_equal(actual, expected)
})
test_that("Regular test - rnorm matrix case", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,1), Empirical_covariance = c(0.91106702, 0.49231819), Empirical_correlation = c(1,1))
set.seed(1)
Z <- actual_correlation(matrix(rnorm(4, 0, 1), nrow = 2), c(0,1))
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
test_that("Regular test - 2*2 matrix case", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,1), Empirical_covariance = c(1.25, 0.25), Empirical_correlation = c(1,1))
Z <- actual_correlation(matrix(1:4, nrow = 2), c(0,1))
# act
actual <- data
# assert
expected <- Z
expect_equal(actual, expected)
})
test_that("Regular test - 2*2 dataframe case", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,1), Empirical_covariance = c(1.25, 0.25), Empirical_correlation = c(1,1))
Z <- actual_correlation(matrix(1:4, nrow = 2), c(0,1))
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
test_that("Regular test -  number case", {
# arrange
data <- data.frame(Distance_pixels = c(0), Distance_km = c(0), Empirical_covariance = c(0), Empirical_correlation = c(NaN))
Z <- actual_correlation(c(1), c(1,0))
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
test_that("Regular test - scale is correctly changed", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,2), Empirical_covariance = c(1.25, 0.25), Empirical_correlation = c(1,1))
Z <- actual_correlation(matrix(1:4, nrow = 2), c(0,1), scale = 2)
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
test_that("Regular test - direction is correctly changed", {
# arrange
# act
actual <- actual_correlation(matrix(1:4, nrow = 2), c(4,6))
# assert
expected <- actual_correlation(matrix(1:4, nrow = 2), c(2,3))
expect_equal(actual, expected)
})
test_that("Anomaly test - error when M is not a vector/matrix/dataframe", {
# arrange
M <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(M, c(0,1)), "^M must contain a vector, matrix or dataframe$")
})
test_that("Anomaly test - error when a_vector is a string", {
# arrange
a_vector <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain a vector$")
})
test_that("Anomaly test - error when a_vector has 1 coordinate", {
# arrange
a_vector <- "bla"
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must have 2 coordinates$")
})
test_that("Anomaly test - error when a_vector is a string", {
# arrange
a_vector <- "matrix(1:4, nrow = 2)"
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain a vector$")
})
test_that("Anomaly test - error when a_vector is not a 2 coordinates vector", {
# arrange
a_vector <- c(1,2,3)
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must have 2 coordinates$")
})
test_that("Anomaly test - error when a_vector is a data frame", {
# arrange
a_vector <- as.data.frame(c(1,2,3))
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain a vector$")
})
test_that("Anomaly test - warning when the return has infinty result", {
# arrange
a_vector <- c(0,1)
# act & assert
expect_warning(actual_correlation(matrix(1:4, nrow = 1), a_vector), "^the result contains infinity NaN$")
})
check()
devtools::check()
document()
check()
devtools::check()
check()
test_that("Anomaly test - error when a_vector does not contain numbers", {
# arrange
a_vector <- c("1", "2")
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain numbers")
})
library(testthat)
test_that("Anomaly test - error when a_vector does not contain numbers", {
# arrange
a_vector <- c("1", "2")
# act & assert
expect_error(actual_correlation(matrix(1:4, nrow = 2), a_vector), "^a_vector must contain numbers")
})
use_testthat()
use_test("block_averages")
load_all()
set.seed(1)
Y <- matrix(rbinom(18, 1, 0.5), nrow = 3)
Y
block_averages(Y, 1)
seq(1, 1, 3)
set.seed(1)
Y <- matrix(rbinom(6*6, 1, 0.5), nrow = 6)
Y
block_averages(Y, 1)
block_averages(Y, 1, grand_pixel = F)
c(seq(6/9, 3), seq(3/9, 3))
seq(3,4)
?seq
matrix(c(rep(firstrows, 3), rep(lastrows, 3)))
firstrows <- c(6/9,6/9,6/9, 3/9,3/9,3/9)
lastrows <- rep(4/9, 6)
matrix(c(rep(firstrows, 3), rep(lastrows, 3)))
# act
actual <- matrix(c(rep(firstrows, 3), rep(lastrows, 3)), rrows = 6)
matrix(c(rep(firstrows, 3), rep(lastrows, 3)), nrows = 6)
# act
actual <- matrix(c(rep(firstrows, 3), rep(lastrows, 3)), nrow = 6)
# act
actual <- matrix(c(rep(firstrows, 3), rep(lastrows, 3)), nrow = 6)
actual
# act
actual <- matrix(c(rep(firstrows, 3), rep(lastrows, 3)), nrow = 6, byrow = T)
actual
test_that("Regular test - Bernoulli law", {
# arrange
set.seed(1)
Y <- matrix(rbinom(6*6, 1, 0.5), nrow = 6)
firstrows <- c(6/9,6/9,6/9, 3/9,3/9,3/9)
lastrows <- rep(4/9, 6)
# act
actual <- matrix(c(rep(firstrows, 3), rep(lastrows, 3)), nrow = 6, byrow = T)
# assert
expected <- block_averages(Y, 1)
expect_equal(actual, expected)
})
test_that("Regular test - Bernoulli law and grand_pixel = F", {
# arrange
set.seed(1)
Y <- matrix(rbinom(6*6, 1, 0.5), nrow = 6)
# act
actual <- matrix(c(6/9 ,3/9, 4/9, 4/9), nrow = 2, byrow = T)
# assert
expected <- block_averages(Y, 1, grand_pixel = F)
expect_equal(actual, expected)
})
M <- matrix(1:100, nrow = 10)
test_that("The plot is the right plot", {
M <- matrix(1:100, nrow = 10)
expect_snapshot(cat(plot_matrix(M)))
})
test_that("The plot is the right plot", {
M <- matrix(1:100, nrow = 10)
expect_snapshot(plot_matrix(M))
})
test_that("The plot is the right plot", {
M <- matrix(1:100, nrow = 10)
expect_snapshot_output(plot_matrix(M))
})
test_that("The plot is the right plot", {
M <- matrix(1:100, nrow = 10)
expect_snapshot_output(plot_matrix(M))
})
test_that("The plot is the right plot", {
M <- matrix(1:10, nrow = 10)
expect_snapshot_output(plot_matrix(M))
})
test_that("The plot is the right plot", {
M <- matrix(1:10, nrow = 10)
expect_snapshot_output(plot_matrix(M))
})
test_that("The plot is the right plot", {
M <- matrix(1:100, nrow = 10)
expect_snapshot_file(plot_matrix(M), "matrix1a100")
})
test_that("The plot is the right plot", {
M <- matrix(1:100, nrow = 10)
expect_snapshot_file(plot_matrix(M), "matrix1a100")
})
test_that("The plot is the right plot", {
M <- matrix(1:100, nrow = 10)
expect_snapshot_file(plot_matrix(M), "matrix1a100.png")
})
test_that("bullets", {
expect_snapshot(cat("a"))
})
setwd("~/Documents/MonPackage/tests/testthat")
test_that("The plot is the right plot", {
M <- matrix(1:100, nrow = 10)
expect_snapshot_file(plot_matrix(M), "matrix1a100.png")
})
test_that("bullets", {
expect_snapshot(cat("a"))
})
library(testthat)
install.packages(c("broom", "ggplot2", "rmarkdown", "testthat", "vdiffr", "xfun"))
