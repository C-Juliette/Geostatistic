ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 2)
# act & assert
expect_error(moving_average(Z, 1), "^The grid must be larger than the window. (Decrease r or increase the grid size)$")
})
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 1), "^The grid must be larger than the window. (Decrease r or increase the grid size)$")
})
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 1), "^The grid must be larger than the window. (Decrease r or increase the grid size)$")
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (r < 0 ){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if (3 < 2 ){stop("The grid must be larger than the window. (Decrease r or increase the grid size)")}
#dim(Z)[1] | (2*r+1) < dim(Z)[2]
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 1), "^The grid must be larger than the window. (Decrease r or increase the grid size)$")
})
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 1), "^The grid must be larger than the window. (Decrease r or increase the grid size)$")
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (r < 0 ){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if ((2*r+1) > 2 ){stop("The grid must be larger than the window. (Decrease r or increase the grid size)")}
#dim(Z)[1] | (2*r+1) < dim(Z)[2]
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 1), "^The grid must be larger than the window. (Decrease r or increase the grid size)$")
})
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 4), "^The grid must be larger than the window. (Decrease r or increase the grid size)$")
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (r < 0 ){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if (4 > 2 ){stop("The grid must be larger than the window. (Decrease r or increase the grid size)")}
#dim(Z)[1] | (2*r+1) < dim(Z)[2]
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 4), "^The grid must be larger than the window. (Decrease r or increase the grid size)$")
})
test_that("Anomaly test - error when r parametre is less than zero", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, -2), "^r must be >= 0$")
})
test_that("Regular test 1", {
# arrange
set.seed(1)
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act
actual <- moving_average(Z,2)
# assert
expected <- matrix(c(13/25))
expect_identical(actual, expected)
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (F){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if (4 > 2 ){stop("The grid must be larger than the window. (Decrease r or increase the grid size)")}
#dim(Z)[1] | (2*r+1) < dim(Z)[2]
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when r parametre is less than zero", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, -2), "^r must be >= 0$")
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (T){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if (4 > 2 ){stop("The grid must be larger than the window. (Decrease r or increase the grid size)")}
#dim(Z)[1] | (2*r+1) < dim(Z)[2]
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when r parametre is less than zero", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, -2), "^r must be >= 0$")
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (r < 0 ){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if (T){stop("The grid must be larger than the window. (Decrease r or increase the grid size)")}
#dim(Z)[1] | (2*r+1) < dim(Z)[2]
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when r parametre is less than zero", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, -2), "^r must be >= 0$")
})
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 4), "^The grid must be larger than the window. (Decrease r or increase the grid size)$")
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (r < 0 ){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if (T){stop("T")}
#dim(Z)[1] | (2*r+1) < dim(Z)[2]
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 4), "^T$")
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (r < 0 ){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if (T){stop("The grid must be larger than the window. (Decrease r or increase the grid size)")}
#dim(Z)[1] | (2*r+1) < dim(Z)[2]
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 4), "^The grid must be larger than the window. (Decrease r or increase the grid size)$")
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (r < 0 ){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if (T){stop("The grid must be larger than the window. Decrease r or increase the grid size")}
#dim(Z)[1] | (2*r+1) < dim(Z)[2]
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 4), "^The grid must be larger than the window. Decrease r or increase the grid size$")
})
s
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 4), "^The grid must be larger than the window. Decrease r or increase the grid size$")
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (r < 0 ){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if (T){stop("The grid must be larger than the window. AEAEDecrease r or increase the grid size")}
#dim(Z)[1] | (2*r+1) < dim(Z)[2]
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 4), "^The grid must be larger than the window. Decrease r or increase the grid size$")
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (r < 0 ){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if (T){stop("The grid must be larger than the window. Decrease r or increase the grid size")}
#dim(Z)[1] | (2*r+1) < dim(Z)[2]
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 4), "^The grid must be larger than the window. Decrease r or increase the grid size$")
})
#' Create a new map/matrix by doing a moving average on a matrix
#'
#' @param Z matrix
#' @param r integer : the radius of the window of the moving average. Ex : r = 1 implies a window of 3*3
#'
#' @return matrix (side effects imply a smaller matrix than the Z matrix passed in parametre)
#' @export
#'
#' @examples
#' moving_average(matrix(rnorm(10*10, 0,1), nrow = 10), r=2)
moving_average <- function(Z, r){
if (!isInteger(r)){stop("r must be an integer")}
if (r < 0 ){stop("r must be >= 0")}
if (is.matrix(Z) == F & is.data.frame(Z) == F){stop("Z must be a matrix/dataframe/tibble")}
if ((2*r+1) < dim(Z)[1] | (2*r+1) < dim(Z)[2]){stop("The grid must be larger than the window. Decrease r or increase the grid size")}
Z <- as.matrix(Z)
nrowsZ <- dim(Z)[1]
ncolsZ <- dim(Z)[2]
nrowsY <- nrowsZ - 2*r
ncolsY <- ncolsZ - 2*r
Y <- matrix(data = rep(0, nrowsY*ncolsY), nrow = nrowsY)
for(i in (r+1):(nrowsZ-r)){
for(j in (r+1):(ncolsZ-r)){
window <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(window)
}
}
return (Y)
}
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 4), "^The grid must be larger than the window. Decrease r or increase the grid size$")
})
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act & assert
expect_error(moving_average(Z, 4), "^The grid must be larger than the window. Decrease r or increase the grid size$")
})
test_that("Anomaly test - error when the window is smaller than the grid", {
# arrange
Z <- matrix(rbinom(4*4, 1, 0.5), nrow = 4)
# act & assert
expect_error(moving_average(Z, 4), "^The grid must be larger than the window. Decrease r or increase the grid size$")
})
