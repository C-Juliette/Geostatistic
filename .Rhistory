runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
library(ggplot2)
library(cowplot)
library(docstring)
library(stringr)
library(viridis)
library(data.table)
library(scales)
library(tidyverse)
library(purrr)
moy_gliss <- function(Z, r){
nblignesZ <- dim(Z)[1]
nbcolonnesZ <- dim(Z)[2]
nblignesY <- nblignesZ - 2*r
nbcolonnesY <- nbcolonnesZ - 2*r
Y <- matrix(data = rep(0, nblignesY*nbcolonnesY), nrow = nblignesY)
for(i in (r+1):(nblignesZ-r)){
for(j in (r+1):(nbcolonnesZ-r)){
fenetre <- Z[(i-r):(i+r), (j-r):(j+r)]
Y[i-r,j-r] <- mean(fenetre)
}
}
return (Y)
}
variance <- function(v){
return(mean(v**2, na.rm =T)- mean(v, na.rm =T)**2)
}
affichage_matrice <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Echelle"){
titre <- str_c(titre, "   Var = " ,as.character(round(variance(M), 4)),  sep = "")
M <- melt(M) # trois colonnes : les i, les j, les valeurs
p <- ggplot(data = M, aes(x = Var1 -0.5, y = Var2 - 0.5) )
if(r != ""){p <- ggplot(M, aes(x = Var1 -0.5+r , y = Var2 -0.5+r, z= value, fill=value))}
p <- p +
geom_tile(aes(fill = value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
p <- p +
labs(title = titre,
x = nom_axeX,
y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= pretty_breaks())+
scale_x_continuous(breaks= pretty_breaks())
return(p)
}
les_boxplots <- function(Z, Y, titre = "Boxplots", nom_axeX = "", nom_axeY = ""){
Z <- as.vector(Z)
Y <- as.vector(Y)
dataZ <- cbind(Z, rep("Z", length(Z)))
dataY <- cbind(Y, rep("Y", length(Y)))
data <- as.data.frame(rbind(dataZ, dataY))
setnames(data, old = c('V2', "Z"), new = c("Grille", "Valeurs"))
data$Valeurs <- as.numeric(data$Valeurs)
data$Grille <- as.factor(data$Grille)
data$Grille <- factor(data$Grille , levels=c("Z", "Y"))
p <- ggplot(data, aes(x = Grille, y = Valeurs, fill = Grille))+
geom_boxplot()+
stat_summary(fun.y="mean", color = "blue")+
labs(title = titre,
x = nom_axeX,
y = nom_axeY)
p
}
les_histogrammes <- function(Z,Y, titre = 'Histogrammes', nom_axeX = "", nom_axeY = ""){
Z <- as.vector(Z)
Z <- as.data.frame(Z)
Y <- as.vector(Y)
Y <- as.data.frame(Y)
p <- ggplot() +
geom_histogram(data = Y, aes(x = Y, y=..count../sum(..count..)), color="black", fill="#01BDC2" )+
geom_histogram(data = Z, aes(x = Z, y=..count../sum(..count..)), color="black", fill="#F8766D", alpha=0.5)+
labs(title = titre,
x = nom_axeX,
y = nom_axeY)
return(p)
}
affichage_general <- function(Z, r, titre = "",paletteinf = "", palettesup = ""){
Y <- moy_gliss(Z,r)
p1 <- affichage_matrice(Z, titre =  "Grille Z",paletteinf = paletteinf, palettesup = palettesup) + coord_cartesian(xlim = c(0, dim(Z)[1]), ylim = c(0, dim(Z)[2]))
p2 <- affichage_matrice(Y,  r, titre = "Grille Y",paletteinf = paletteinf, palettesup = palettesup)+ coord_cartesian(xlim = c(0, dim(Z)[1]), ylim = c(0, dim(Z)[2]))
#p3 <- affichage_niveau(Y,r) + coord_cartesian(xlim = c(0, dim(Z)[1]), ylim = c(0, dim(Z)[2]))
p3 <- les_histogrammes(Z,Y)
p4 <- les_boxplots(Z,Y)
title <- ggdraw() + draw_label(titre, fontface='bold')
p <- plot_grid(p1,p2,p3,p4, ncol=2, nrow=2) #, labels=c(str_c("Grille Z - Var(Z) = ", as.character(round(variance(Z), 4)), sep = ""),str_c("Grille Y - Var(Y) = ", as.character(round(variance(Y), 4)), sep = ""),"Lissage de Y", "Boxplots") )+
scale_fill_viridis_c(option = "B", direction = -1)
#plot_grid(titre, p, ncol=1, rel_heights=c(0.1, 1))
p
}
affichage_avec_r_qui_augmente<- function(Z){
p1 <- affichage_matrice(Z, titre = "Grille Z")
p2 <- affichage_matrice(moy_gliss(Z,r =1), r = 1, titre = str_c("r=1 :  ", as.character((2*1+1)**2), " px/fenêtre " , sep = "")) + coord_cartesian(xlim = c(0, dim(Z)[1]), ylim = c(0, dim(Z)[2]))
p3 <- affichage_matrice(moy_gliss(Z,r =2), r = 2, titre = str_c("r = 2 :  ", as.character((2*2+1)**2), " px/fenêtre " , sep = "")) + coord_cartesian(xlim = c(0, dim(Z)[1]), ylim = c(0, dim(Z)[2]))
p4 <- affichage_matrice(moy_gliss(Z,r =3), r = 3, titre = str_c("r = 3 :  ", as.character((2*3+1)**2), " px/fenêtre " , sep = "")) + coord_cartesian(xlim = c(0, dim(Z)[1]), ylim = c(0, dim(Z)[2]))
p5 <- affichage_matrice(moy_gliss(Z,r =5), r = 5, titre = str_c("r = 5 :  ", as.character((2*5+1)**2), " px/fenêtre " , sep = "")) + coord_cartesian(xlim = c(0, dim(Z)[1]), ylim = c(0, dim(Z)[2]))
p6 <- affichage_matrice(moy_gliss(Z,r =8), r = 8, titre = str_c("r = 8 :  ", as.character((2*8+1)**2), " px/fenêtre " , sep = "")) + coord_cartesian(xlim = c(0, dim(Z)[1]), ylim = c(0, dim(Z)[2]))
p7 <- affichage_matrice(moy_gliss(Z,r =10), r = 10, titre = str_c("r = 10 :  ", as.character((2*10+1)**2), " px/fenêtre " , sep = "")) + coord_cartesian(xlim = c(0, dim(Z)[1]), ylim = c(0, dim(Z)[2]))
p8 <- affichage_matrice(moy_gliss(Z,r = 15), r = 15, titre = str_c("r = 15 :  ", as.character((2*15+1)**2), " px/fenêtre " , sep = "")) + coord_cartesian(xlim = c(0, dim(Z)[1]), ylim = c(0, dim(Z)[2]))
p9 <- affichage_matrice(moy_gliss(Z,r =20), r = 20, titre = str_c("r = 20 :  ", as.character((2*20+1)**2), " px/fenêtre " , sep = "")) + coord_cartesian(xlim = c(0, dim(Z)[1]), ylim = c(0, dim(Z)[2]))
liste <- list(p1, p2, p3, p4, p5, p6, p7, p8, p9)
p <- plot_grid(plotlist = liste, ncol=3, nrow = 3)
#p  <- plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9, ncol=3, nrow = 3)
return(p)
}
Z <- matrix(rnorm(100*100, 0, 1), nrow = 100)
affichage_avec_r_qui_augmente(Z)
#histo_data_Y_correles <- function(Z){
#  dframe <-c()
#  for(r in 1:25){
#    legende <- c()
#    Rayon <- c()
#    Nb_points_fenetre <- c()
#    Nb_points_grille <- c()
#    for (i in 1:((100-2*r)**2)){
#      Rayon[i] <- r
#      Nb_points_fenetre[i] <- (2*r+1)**2
#      Nb_points_grille[i] <- (100-2*r)**2
#      #legende[i] <- str_c("fafaz", as.character(i), sep = "")
#    }
#    Y <- as.vector(moy_gliss(Z, r))
#    df <- cbind.data.frame(Y, Rayon, Nb_points_fenetre, Nb_points_grille)
#    dframe <- rbind.data.frame(dframe, df)
#    #Legende <- rbind(Legende, legende)
#  }
#  dframe$Legende <- str_c("F : ", (2*dframe$Rayon+1)^2, " px = (2*", dframe$Rayon,"+1)² = " , (2*dframe$Rayon+1), "²", sep ="")
#  #print(length(Legende))
#  return(dframe)
#}
#
#histo_data_Y_independants <- function(loi, p=0.5, esperance_Z = 0, sigma_Z = 1, lambda = 0.7){
#  W <- c()
#  Rayon <- c()
#  dframe <-c()
#  for(r in 1:25){
#    for (i in 1:10000){
#      if(loi == "rbinom"){W[i] <- mean(rbinom((2*r+1)**2,1, p))}
#      if(loi == "rnorm"){W[i] <- mean(rnorm((2*r+1)**2, esperance_Z, sigma_Z))}
#      if(loi == "rpois"){W[i] <- mean(rpois((2*r+1)**2, lambda))}
#      Rayon[i] <- r
#    }
#    df <- cbind(W, Rayon)
#    dframe <- rbind(dframe, df)
#    dframe <- as.data.frame(dframe)
#  }
#  return(dframe)
#}
#
#
M <- matrix(rbinom(10*10, 1, 0.5), nrow = 10)
M
M1 <- reshape2::melt(M)
head(M1)
class(M1)
names(M1)
M2 <- long(M)
head(M2)
class(M2)
names(M2)
affichage_matrice(M)
tibble(M2)
affichage_matrice(matrix(1:100, nrow = 10), r = 1)
affichage_matrice(matrix(rnorm(100, 0, 1), nrow = 10), r = 1)
affichage_matrice(matrix(rnorm(100, 0, 1), nrow = 10))
affichage_matrice(matrix(rnorm(100, 0, 1), nrow = 10, r = ""))
affichage_matrice(matrix(rnorm(100, 0, 1), nrow = 10), r = ""))
affichage_matrice(matrix(rnorm(100, 0, 1), nrow = 10), r = "")
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
Mnormale <-  matrix(rnorm((input$lengthX)*(input$lengthY), input$mean2, sqrt(input$variance2)), nrow = input$lengthX)
moving_average(Mnormale, 1)
Mnormale <- matrix(rnorm(100,0,1, nrow = 10))
Mnormale <- matrix(rnorm(100,0,1) nrow = 10)
Mnormale <- matrix(rnorm(100,0,1), nrow = 10)
moving_average(Mnormale, 1)
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
source("fonctions_PARTIE_1.r", encoding = "UTF-8")
source("fonctions_PARTIE_2.r", encoding = "UTF-8")
##### Partie 3 #####
maillage_large <- function(Y, facteur_dilatation, bord = 0){
Mlarge <- matrix(rep(NA, dim(Y)[1]*dim(Y)[2]), nrow = dim(Y)[1])
abscisse <- seq(bord+1,nrow(Y)-bord,facteur_dilatation)
ordonnee <- seq(bord+1,ncol(Y)-bord,facteur_dilatation)
Mlarge[abscisse, ordonnee] <- Y[abscisse, ordonnee]
return(Mlarge)
}
maillage_large_sans_NA <- function(Y, facteur_dilatation, bord = 0){
return(Y[seq(bord+1,nrow(M)-bord,facteur_dilatation),seq(bord+1,ncol(M)-bord,facteur_dilatation)])
}
maillage_large_par_moyenne <- function(Y, rprime, grand_pixel = TRUE){
facteur_dilatation <- 2*rprime+1
Ytemp <- moy_gliss(Y, rprime)
selection_ligne <- seq(1, dim(Ytemp)[1], facteur_dilatation)
selection_colonne <- seq(1, dim(Ytemp)[2], facteur_dilatation)
Y2_sansNA <- Ytemp[selection_ligne,selection_colonne]
if(grand_pixel == TRUE){
Y2 <- matrix(rep(0, dim(Y)[1]*dim(Y)[2]), nrow = dim(Y)[1])
for(i in 1:dim(Y2_sansNA)[1]){
for(j in 1:dim(Y2_sansNA)[2]){
fenetre_ligne <- (facteur_dilatation*i - (facteur_dilatation -1)):(facteur_dilatation*i)
fenetre_colonne  <- (facteur_dilatation*j - (facteur_dilatation -1)):(facteur_dilatation*j)
Y2[fenetre_ligne,fenetre_colonne] <- Y2_sansNA[i,j]
}
}
}
if(grand_pixel == FALSE){Y2 <- Y2_sansNA}
return(Y2)
}
s2intra <- function(Y, rprime){
facteur_dilatation <- 2*rprime+1
V <- c()
bloc_ligne <- dim(Y)[1] %/% facteur_dilatation
bloc_colonne <- dim(Y)[2] %/% facteur_dilatation
for( i in 1:bloc_ligne){
for(j in 1:bloc_colonne){
fenetre_ligne <- (facteur_dilatation*i - (facteur_dilatation -1)):(facteur_dilatation*i)
fenetre_colonne  <- (facteur_dilatation*j - (facteur_dilatation -1)):(facteur_dilatation*j)
fenetre <- Y[fenetre_ligne,fenetre_colonne]
V <- append(V,variance(as.vector(fenetre)))
}
}
return(mean(V))
}
s2inter <- function(Y,rprime){
Y2 <- maillage_large_par_moyenne(Y, rprime = 2, grand_pixel = FALSE)
sinter <- variance(Y2)
return(sinter)
}
runApp('~/Documents/Appli_shiny/appli.R')
breaks <- input$breaks
## Only run this example in interactive R sessions
library(shiny)
library(shinydashboard)
if (interactive()) {
ui <- fluidPage(
sidebarPanel(
selectInput("plotType", "Plot Type",
c(Scatter = "scatter", Histogram = "hist")
),
# Only show this panel if the plot type is a histogram
conditionalPanel(
condition = "input.plotType == 'hist'",
selectInput(
"breaks", "Breaks",
c("Sturges", "Scott", "Freedman-Diaconis", "[Custom]" = "custom")
),
# Only show this panel if Custom is selected
conditionalPanel(
condition = "input.breaks == 'custom'",
sliderInput("breakCount", "Break Count", min = 1, max = 50, value = 10)
)
)
),
mainPanel(
plotOutput("plot")
)
)
server <- function(input, output) {
x <- rnorm(100)
y <- rnorm(100)
output$plot <- renderPlot({
if (input$plotType == "scatter") {
plot(x, y)
} else {
breaks <- input$breaks
if (breaks == "custom") {
breaks <- input$breakCount
}
hist(x, breaks = breaks)
}
})
}
shinyApp(ui, server)
}
library(shiny); runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
library(shiny); runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
check()
block_averages(matrix(rnorm(25*25, 0,1), nrow = 25), rprime = 5)
block_averages(matrix(rnorm(25*25, 2,1), nrow = 25), rprime = 5)
A <- block_averages(matrix(rnorm(25*25, 2,1), nrow = 25), rprime = 5)
plot(A)
A <- matrix(rnorm(25*25, 2,1), nrow = 25)
plot(A)
plot_matrix(A)
B <- block_averages(A)
B <- block_averages(A, 2)
plot_matrix(B)
check()
check()
install()
runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
library(shiny); runApp('~/Documents/Shiny_tests/tuto_shinydashboard.R')
usethis::use_readme_rmd()
library(shiny)
library(shinydashboard)
?menuItem
install.packages("waldo")
test_that("Regular test - rnorm matrix case", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,1), Empirical_covariance = c(0.91106702, 0.49231819), Empirical_correlation = c(1,1))
set.seed(1)
Z <- actual_correlation(matrix(rnorm(4, 0, 1), nrow = 2), c(0,1))
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
library(testthat)
test_that("Regular test - rnorm matrix case", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,1), Empirical_covariance = c(0.91106702, 0.49231819), Empirical_correlation = c(1,1))
set.seed(1)
Z <- actual_correlation(matrix(rnorm(4, 0, 1), nrow = 2), c(0,1))
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
ckeck()
library(usethis)
ckeck()
library(devtools)
ckeck()
check()
test_that("Regular test - rnorm matrix case", {
# arrange
data <- data.frame(Distance_pixels = c(0,1), Distance_km = c(0,1), Empirical_covariance = c(0.91106702, 0.49231819), Empirical_correlation = c(1,1))
set.seed(1)
Z <- actual_correlation(matrix(rnorm(4, 0, 1), nrow = 2), c(0,1))
# act
actual <- data
# assert
expected <- as.data.frame(Z)
expect_equal(actual, expected)
})
foo <- function() "something complicted"
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
foo <- function() "something complicted"
test_that("foo works", {
out <- foo()
expect_type(out, "character")
expect_snapshot_output(out)
})
usethis::use_readme_rmd()
rmarkdown::render(input = 'README.Rmd', encoding = 'UTF-8')
check()
######################### REGULAR TESTS #######################
test_that("Regular test - unchanged grid when r = 0", {
# arrange
Z <- matrix(rnorm(5*5, 2, 4), nrow = 5)
# act
actual <- moving_average(Z,0)
# assert
expected <- Z
expect_equal(actual, expected)
})
test_that("Regular test - full of zeros grid", {
# arrange
Z <- matrix(rep(0, 5*5), nrow = 5)
# act
actual <- moving_average(Z,2)
# assert
expected <- matrix(c(0))
expect_identical(actual, expected)
})
test_that("Regular test - full of ones grid (and 5*5 window)", {
# arrange
Z <- matrix(rep(1, 5*5), nrow = 5)
# act
actual <- moving_average(Z,2)
# assert
expected <- matrix(c(1))
expect_identical(actual, expected)
})
test_that("Regular test - full of ones grid (and 3*3 window)", {
# arrange
Z <- matrix(rep(1, 5*5), nrow = 5)
# act
actual <- moving_average(Z,1)
# assert
expected <- matrix(rep(1,9), nrow = 3)
expect_identical(actual, expected)
})
test_that("Regular test - Bernoulli grid", {
# arrange
set.seed(1)
Z <- matrix(rbinom(5*5, 1, 0.5), nrow = 5)
# act
actual <- moving_average(Z,2)
# assert
expected <- matrix(c(13/25))
expect_identical(actual, expected)
})
test_that("Regular test - Z is a number", {
# arrange
Z <- 2
# act
actual <- moving_average(Z,0)
# assert
expected <- matrix(2)
expect_equal(actual, expected)
})
test_that("Regular test - Z is a vector", {
# arrange
Z <- c(1, 2, 3, 4)
# act
actual <- moving_average(Z,0)
# assert
expected <- matrix(Z)
expect_identical(actual, expected)
})
test_that("Anomaly test - error when Z parametre isn't a matrix/dataframe - test 1", {
# arrange
Z <- "matrix(rbinom(5*5, 1, 0.5), nrow = 5)"
# act & assert
expect_error(moving_average(Z, 1), "^Z must be a matrix/dataframe of numbers$")
})
check()
test()
check()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
check()
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
check()
?margin
?margin
check()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
?geom_line
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
?geom_line
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
load_all()
plot_expected_cov(1, c(1,2,3), list(c(0,1), c(1,1), c(1,2)))
check()
globalVariables(c("mpg", "hp", "mpg_div_hp"))aa
data_frame_expected_cov(1, c(1), list(c(0,1), c(1,1), c(1, 2)))
nam<-c("Distance_pixels", "Distance_km", "Expected_covariance", "Expected_correlation", "Direction", "Radius_pixels",  "Radius_km")
globalVariables(c("Distance_pixels", "Distance_km", "Expected_covariance", "Expected_correlation", "Direction", "Radius_pixels",  "Radius_km"), Monpackage, add = TRUE)
globalVariables(c("Distance_pixels", "Distance_km", "Expected_covariance", "Expected_correlation", "Direction", "Radius_pixels",  "Radius_km"), "Monpackage", add = TRUE)
check()
check()
