y = nom_axeY) +
guides(fill = guide_colorbar(title = echelle))+
scale_y_continuous(breaks= scales::pretty_breaks())+
scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
######################### REGULAR TESTS #######################
test_that("Regular test - simple plot", {
# arrange
M <- matrix(rnorm(5*5, 2, 4), nrow = 5) |> long_shaped_matrix()
titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")
p <- ggplot(M, aes(x = .data$Var1 -0.5, y = .data$Var2 -0.5)) + #, z= .data$value, fill=.data$value)) +
geom_tile(aes(fill = value)) +
scale_fill_viridis_c(option = "B", direction = -1) +
labs(title = titre,
x = "",
y = "") +
guides(fill = guide_colorbar(title = "Scale"))+
scale_y_continuous(breaks = scales::pretty_breaks())+
scale_x_continuous(breaks = scales::pretty_breaks())
# act
actual <- plot_matrix(M)
# assert
expected <- p
expect_equal(actual, expected)
})
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Scale"){
# if (is.data.frame(M)){M <- as.matrix(M)}
#if (!is.numeric(M)){stop("M must contain numbers")}
# if(titre == ""){titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
#else{titre <- stringr::str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
if(r == ""){p <- ggplot(data = M, aes(x = .data$Var1 -0.5, y = .data$Var2 - 0.5))}
else {p <- ggplot(M, aes(x = .data$Var1 -0.5+r , y = .data$Var2 -0.5+r))}#, z= .data$value, fill=.data$value))}
#p <- p +
#  geom_tile(aes(fill = .data$value))
#if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
#else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
#p <- p +
#  labs(title = titre,
#       x = nom_axeX,
#       y = nom_axeY) +
#  guides(fill = guide_colorbar(title = echelle))+
#  scale_y_continuous(breaks= scales::pretty_breaks())+
#  scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
plot_matrix(M)
plot_matrix(M)
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Scale"){
# if (is.data.frame(M)){M <- as.matrix(M)}
#if (!is.numeric(M)){stop("M must contain numbers")}
# if(titre == ""){titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
#else{titre <- stringr::str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
if(r == ""){p <- ggplot(data = M, aes(x = .data$Var1 -0.5, y = .data$Var2 - 0.5))}
else {p <- ggplot(M, aes(x = .data$Var1 -0.5+r , y = .data$Var2 -0.5+r))}#, z= .data$value, fill=.data$value))}
p <- p +
geom_tile(aes(fill = .data$value))
if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
#p <- p +
#  labs(title = titre,
#       x = nom_axeX,
#       y = nom_axeY) +
#  guides(fill = guide_colorbar(title = echelle))+
#  scale_y_continuous(breaks= scales::pretty_breaks())+
#  scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
plot_matrix(M)
M
M <- matrix(1:10, nrow = 2)
plot_matrix(M)
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Scale"){
# if (is.data.frame(M)){M <- as.matrix(M)}
#if (!is.numeric(M)){stop("M must contain numbers")}
# if(titre == ""){titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
#else{titre <- stringr::str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
if(r == ""){p <- ggplot(data = M, aes(x = .data$Var1 -0.5, y = .data$Var2 - 0.5))}
else {p <- ggplot(M, aes(x = .data$Var1 -0.5+r , y = .data$Var2 -0.5+r))}#, z= .data$value, fill=.data$value))}
p <- p +
geom_tile(aes(fill = .data$value))
#if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
#else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
#p <- p +
#  labs(title = titre,
#       x = nom_axeX,
#       y = nom_axeY) +
#  guides(fill = guide_colorbar(title = echelle))+
#  scale_y_continuous(breaks= scales::pretty_breaks())+
#  scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
plot_matrix(M)
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Scale"){
# if (is.data.frame(M)){M <- as.matrix(M)}
#if (!is.numeric(M)){stop("M must contain numbers")}
# if(titre == ""){titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
#else{titre <- stringr::str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
if(r == ""){p <- ggplot(data = M, aes(x = .data$Var1 -0.5, y = .data$Var2 - 0.5))}
else {p <- ggplot(M, aes(x = .data$Var1 -0.5+r , y = .data$Var2 -0.5+r))}#, z= .data$value, fill=.data$value))}
#p <- p +
#geom_tile(aes(fill = .data$value))
#if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
#else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
#p <- p +
#  labs(title = titre,
#       x = nom_axeX,
#       y = nom_axeY) +
#  guides(fill = guide_colorbar(title = echelle))+
#  scale_y_continuous(breaks= scales::pretty_breaks())+
#  scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
plot_matrix(M)
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Scale"){
# if (is.data.frame(M)){M <- as.matrix(M)}
#if (!is.numeric(M)){stop("M must contain numbers")}
# if(titre == ""){titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
#else{titre <- stringr::str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
if(r == ""){p <- ggplot(data = M, aes(x = .data$Var1 -0.5, y = .data$Var2 - 0.5, z= .data$value, fill=.data$value))}
else {p <- ggplot(M, aes(x = .data$Var1 -0.5+r , y = .data$Var2 -0.5+r, z= .data$value, fill=.data$value))}
#p <- p +
#geom_tile(aes(fill = .data$value))
#if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
#else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
#p <- p +
#  labs(title = titre,
#       x = nom_axeX,
#       y = nom_axeY) +
#  guides(fill = guide_colorbar(title = echelle))+
#  scale_y_continuous(breaks= scales::pretty_breaks())+
#  scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
plot_matrix(M)
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Scale"){
# if (is.data.frame(M)){M <- as.matrix(M)}
#if (!is.numeric(M)){stop("M must contain numbers")}
# if(titre == ""){titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
#else{titre <- stringr::str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
if(r == ""){p <- ggplot(data = M, aes(x = .data$Var1 -0.5, y = .data$Var2 - 0.5, z= .data$value, fill=.data$value))}
else {p <- ggplot(M, aes(x = .data$Var1 -0.5+r , y = .data$Var2 -0.5+r, z= .data$value, fill=.data$value))}#
#p <- p +
#geom_tile(aes(fill = .data$value))
#if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
#else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
#p <- p +
#  labs(title = titre,
#       x = nom_axeX,
#       y = nom_axeY) +
#  guides(fill = guide_colorbar(title = echelle))+
#  scale_y_continuous(breaks= scales::pretty_breaks())+
#  scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
plot_matrix(M)
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Scale"){
# if (is.data.frame(M)){M <- as.matrix(M)}
#if (!is.numeric(M)){stop("M must contain numbers")}
# if(titre == ""){titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
#else{titre <- stringr::str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
if(r == ""){p <- ggplot(data = M, aes(x = .data$Var1 -0.5, y = .data$Var2 - 0.5))}#, z= .data$value, fill=.data$value))}
else {p <- ggplot(M, aes(x = .data$Var1 -0.5+r , y = .data$Var2 -0.5+r))}#, z= .data$value, fill=.data$value))}#
p <- p +
geom_tile(aes(fill = .data$value))
#if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
#else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
#p <- p +
#  labs(title = titre,
#       x = nom_axeX,
#       y = nom_axeY) +
#  guides(fill = guide_colorbar(title = echelle))+
#  scale_y_continuous(breaks= scales::pretty_breaks())+
#  scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Scale"){
# if (is.data.frame(M)){M <- as.matrix(M)}
#if (!is.numeric(M)){stop("M must contain numbers")}
# if(titre == ""){titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
#else{titre <- stringr::str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
if(r == ""){p <- ggplot(data = M, aes(x = .data$Var1 -0.5, y = .data$Var2 - 0.5))}#, z= .data$value, fill=.data$value))}
else {p <- ggplot(M, aes(x = .data$Var1 -0.5+r , y = .data$Var2 -0.5+r))}#, z= .data$value, fill=.data$value))}#
p <- p +
geom_tile(aes(fill = .data$value))
#if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
#else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
#p <- p +
#  labs(title = titre,
#       x = nom_axeX,
#       y = nom_axeY) +
#  guides(fill = guide_colorbar(title = echelle))+
#  scale_y_continuous(breaks= scales::pretty_breaks())+
#  scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
plot_matrix(M)
M <- matrix(rnorm(5*5, 2, 4), nrow = 5) |> long_shaped_matrix()
M
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Scale"){
# if (is.data.frame(M)){M <- as.matrix(M)}
#if (!is.numeric(M)){stop("M must contain numbers")}
# if(titre == ""){titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
#else{titre <- stringr::str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
if(r == ""){p <- ggplot(data = M, aes(x = .data$Var1 -0.5, y = .data$Var2 - 0.5))}#, z= .data$value, fill=.data$value))}
else {p <- ggplot(M, aes(x = .data$Var1 -0.5+r , y = .data$Var2 -0.5+r))}#, z= .data$value, fill=.data$value))}#
p <- p +
geom_tile(aes(fill = .data$value))
#if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
#else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
#p <- p +
#  labs(title = titre,
#       x = nom_axeX,
#       y = nom_axeY) +
#  guides(fill = guide_colorbar(title = echelle))+
#  scale_y_continuous(breaks= scales::pretty_breaks())+
#  scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
######################### REGULAR TESTS #######################
test_that("Regular test - simple plot", {
# arrange
M <- matrix(rnorm(5*5, 2, 4), nrow = 5) |> long_shaped_matrix()
#titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")
p <- ggplot(M, aes(x = .data$Var1 -0.5, y = .data$Var2 -0.5)) + #, z= .data$value, fill=.data$value)) +
geom_tile(aes(fill = value)) #+
#scale_fill_viridis_c(option = "B", direction = -1) +
#labs(title = titre,
#     x = "",
#     y = "") +
#guides(fill = guide_colorbar(title = "Scale"))+
#scale_y_continuous(breaks = scales::pretty_breaks())+
#scale_x_continuous(breaks = scales::pretty_breaks())
# act
actual <- plot_matrix(M)
# assert
expected <- p
expect_equal(actual, expected)
})
######################### REGULAR TESTS #######################
test_that("Regular test - simple plot", {
# arrange
M <- matrix(1:25, nrow = 5) |> long_shaped_matrix()
#titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")
p <- ggplot(M, aes(x = .data$Var1 -0.5, y = .data$Var2 -0.5)) + #, z= .data$value, fill=.data$value)) +
geom_tile(aes(fill = value)) #+
#scale_fill_viridis_c(option = "B", direction = -1) +
#labs(title = titre,
#     x = "",
#     y = "") +
#guides(fill = guide_colorbar(title = "Scale"))+
#scale_y_continuous(breaks = scales::pretty_breaks())+
#scale_x_continuous(breaks = scales::pretty_breaks())
# act
actual <- plot_matrix(M)
# assert
expected <- p
expect_equal(actual, expected)
})
M <- matrix(1:25, nrow = 5) |> long_shaped_matrix()
#titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")
p <- ggplot(M, aes(x = .data$Var1 -0.5, y = .data$Var2 -0.5)) + #, z= .data$value, fill=.data$value)) +
geom_tile(aes(fill = value)) #+
p
plot_matrix(M)
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r= "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Scale"){
# if (is.data.frame(M)){M <- as.matrix(M)}
#if (!is.numeric(M)){stop("M must contain numbers")}
# if(titre == ""){titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
#else{titre <- stringr::str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
if(r == ""){p <- ggplot(data = M, aes(x = .data$Var1 -0.5, y = .data$Var2 - 0.5))}#, z= .data$value, fill=.data$value))}
else {p <- ggplot(M, aes(x = .data$Var1 -0.5+r , y = .data$Var2 -0.5+r))}#, z= .data$value, fill=.data$value))}#
p <- p +
geom_tile(aes(fill = .data$value))
#if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
#else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
#p <- p +
#  labs(title = titre,
#       x = nom_axeX,
#       y = nom_axeY) +
#  guides(fill = guide_colorbar(title = echelle))+
#  scale_y_continuous(breaks= scales::pretty_breaks())+
#  scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
plot_matrix(M)
M
M <- matrix(1:25, nrow = 5) |> long_shaped_matrix()
#titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")
p <- ggplot(M, aes(x = .data$Var1 -0.5, y = .data$Var2 -0.5)) + #, z= .data$value, fill=.data$value)) +
geom_tile(aes(fill = value))
p
M
show(M)
summary(M)
as.data.frame(M)
#' @param nom_axeX name for X axis
#' @param nom_axeY name for Y axis
#' @param echelle title of scale
#'
#' @return a plot
#' @export
#'
#' @examples
#'
#' plot_matrix(matrix(rbinom(10*10, 1, 0.5), nrow = 10))
plot_matrix <- function(M, r = "", paletteinf = "", palettesup = "", titre = "", nom_axeX = "", nom_axeY = "", echelle = "Scale"){
# if (is.data.frame(M)){M <- as.matrix(M)}
#if (!is.numeric(M)){stop("M must contain numbers")}
# if(titre == ""){titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")}
#else{titre <- stringr::str_c(titre, "  -  Var = " ,as.character(round(variance(M), 4)),  sep = "")}
M <- M |> long_shaped_matrix() # trois colonnes : les i, les j, les valeurs
#if(r == ""){
p <- ggplot(data = M, aes(x = .data$Var1 - 0.5, y = .data$Var2 - 0.5))#}#, z= .data$value, fill=.data$value))}
#else {p <- ggplot(M, aes(x = .data$Var1 - 0.5+r , y = .data$Var2 - 0.5+r))}#, z= .data$value, fill=.data$value))}#
p <- p +
geom_tile(aes(fill = .data$value))
#if(paletteinf != "" & palettesup != ""){p <- p+scale_fill_viridis_c(option = "B", direction = -1, limits = c(paletteinf, palettesup))}
#else{p <- p+scale_fill_viridis_c(option = "B", direction = -1)}
#p <- p +
#  labs(title = titre,
#       x = nom_axeX,
#       y = nom_axeY) +
#  guides(fill = guide_colorbar(title = echelle))+
#  scale_y_continuous(breaks= scales::pretty_breaks())+
#  scale_x_continuous(breaks= scales::pretty_breaks())
return(p)
}
plot_matrix(M)
######################### REGULAR TESTS #######################
test_that("Regular test - simple plot", {
# arrange
M <- matrix(1:25, nrow = 5) |> long_shaped_matrix()
#titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")
p <- ggplot(M, aes(x = .data$Var1 -0.5, y = .data$Var2 -0.5)) + #, z= .data$value, fill=.data$value)) +
geom_tile(aes(fill = value)) #+
#scale_fill_viridis_c(option = "B", direction = -1) +
#labs(title = titre,
#     x = "",
#     y = "") +
#guides(fill = guide_colorbar(title = "Scale"))+
#scale_y_continuous(breaks = scales::pretty_breaks())+
#scale_x_continuous(breaks = scales::pretty_breaks())
# act
actual <- plot_matrix(M)
# assert
expected <- p
expect_equal(actual, expected)
})
library(testthat)
load_all()
######################### REGULAR TESTS #######################
test_that("Regular test - simple plot", {
# arrange
M <- matrix(1:25, nrow = 5) |> long_shaped_matrix()
#titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")
p <- ggplot(M, aes(x = .data$Var1 -0.5, y = .data$Var2 -0.5)) + #, z= .data$value, fill=.data$value)) +
geom_tile(aes(fill = value)) #+
#scale_fill_viridis_c(option = "B", direction = -1) +
#labs(title = titre,
#     x = "",
#     y = "") +
#guides(fill = guide_colorbar(title = "Scale"))+
#scale_y_continuous(breaks = scales::pretty_breaks())+
#scale_x_continuous(breaks = scales::pretty_breaks())
# act
actual <- plot_matrix(M)
# assert
expected <- p
expect_equal(actual, expected)
})
plot_matrix(M)
M <- matrix(1:25, nrow = 5) |> long_shaped_matrix()
M <- matrix(1:25, nrow = 5)
plot_matrix(M)
M <- matrix(1:25, nrow = 5) |> long_shaped_matrix()
plot_matrix(M)
######################### REGULAR TESTS #######################
test_that("Regular test - simple plot", {
# arrange
M <- matrix(1:25, nrow = 5)
#titre <- stringr::str_c("Var = " ,as.character(round(variance(M), 4)),  sep = "")
p <- ggplot(long_shaped_matrix(M), aes(x = .data$Var1 -0.5, y = .data$Var2 -0.5)) + #, z= .data$value, fill=.data$value)) +
geom_tile(aes(fill = value)) #+
#scale_fill_viridis_c(option = "B", direction = -1) +
#labs(title = titre,
#     x = "",
#     y = "") +
#guides(fill = guide_colorbar(title = "Scale"))+
#scale_y_continuous(breaks = scales::pretty_breaks())+
#scale_x_continuous(breaks = scales::pretty_breaks())
# act
actual <- plot_matrix(M)
# assert
expected <- p
expect_equal(actual, expected)
})
M <- matrix(1:25, nrow = 5)
p <- ggplot(long_shaped_matrix(M), aes(x = .data$Var1 -0.5, y = .data$Var2 -0.5)) + #, z= .data$value, fill=.data$value)) +
geom_tile(aes(fill = value))
p
plot_matrix(M)
